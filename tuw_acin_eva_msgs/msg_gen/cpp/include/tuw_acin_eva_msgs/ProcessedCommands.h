/* Auto-generated by genmsg_cpp for file /home/bajo/workspace/tuw_acin_eva2/tuw_acin_eva_msgs/msg/ProcessedCommands.msg */
#ifndef TUW_ACIN_EVA_MSGS_MESSAGE_PROCESSEDCOMMANDS_H
#define TUW_ACIN_EVA_MSGS_MESSAGE_PROCESSEDCOMMANDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tuw_acin_eva_msgs
{
template <class ContainerAllocator>
struct ProcessedCommands_ {
  typedef ProcessedCommands_<ContainerAllocator> Type;

  ProcessedCommands_()
  : command(0)
  , parameters()
  {
  }

  ProcessedCommands_(const ContainerAllocator& _alloc)
  : command(0)
  , parameters(_alloc)
  {
  }

  typedef int8_t _command_type;
  int8_t command;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _parameters_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  parameters;


  typedef boost::shared_ptr< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ProcessedCommands
typedef  ::tuw_acin_eva_msgs::ProcessedCommands_<std::allocator<void> > ProcessedCommands;

typedef boost::shared_ptr< ::tuw_acin_eva_msgs::ProcessedCommands> ProcessedCommandsPtr;
typedef boost::shared_ptr< ::tuw_acin_eva_msgs::ProcessedCommands const> ProcessedCommandsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tuw_acin_eva_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "99bd9d5d381f3b949e10fbd1fb7ebaff";
  }

  static const char* value(const  ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x99bd9d5d381f3b94ULL;
  static const uint64_t static_value2 = 0x9e10fbd1fb7ebaffULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tuw_acin_eva_msgs/ProcessedCommands";
  }

  static const char* value(const  ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 command\n\
string[] parameters\n\
\n\
";
  }

  static const char* value(const  ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.command);
    stream.next(m.parameters);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ProcessedCommands_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tuw_acin_eva_msgs::ProcessedCommands_<ContainerAllocator> & v) 
  {
    s << indent << "command: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command);
    s << indent << "parameters[]" << std::endl;
    for (size_t i = 0; i < v.parameters.size(); ++i)
    {
      s << indent << "  parameters[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameters[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TUW_ACIN_EVA_MSGS_MESSAGE_PROCESSEDCOMMANDS_H

