/* Auto-generated by genmsg_cpp for file /home/bajo/workspace/tuw_acin_eva2/tuw_acin_eva_people/msg/DoHeadMoveFeedback.msg */
#ifndef TUW_ACIN_EVA_PEOPLE_MESSAGE_DOHEADMOVEFEEDBACK_H
#define TUW_ACIN_EVA_PEOPLE_MESSAGE_DOHEADMOVEFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tuw_acin_eva_people
{
template <class ContainerAllocator>
struct DoHeadMoveFeedback_ {
  typedef DoHeadMoveFeedback_<ContainerAllocator> Type;

  DoHeadMoveFeedback_()
  : current_pos()
  {
  }

  DoHeadMoveFeedback_(const ContainerAllocator& _alloc)
  : current_pos(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _current_pos_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  current_pos;


  typedef boost::shared_ptr< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DoHeadMoveFeedback
typedef  ::tuw_acin_eva_people::DoHeadMoveFeedback_<std::allocator<void> > DoHeadMoveFeedback;

typedef boost::shared_ptr< ::tuw_acin_eva_people::DoHeadMoveFeedback> DoHeadMoveFeedbackPtr;
typedef boost::shared_ptr< ::tuw_acin_eva_people::DoHeadMoveFeedback const> DoHeadMoveFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tuw_acin_eva_people

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "26a282a599ced22fefe3f7297a70c666";
  }

  static const char* value(const  ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x26a282a599ced22fULL;
  static const uint64_t static_value2 = 0xefe3f7297a70c666ULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tuw_acin_eva_people/DoHeadMoveFeedback";
  }

  static const char* value(const  ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define a feedback message\n\
float32[] current_pos # current position of the head\n\
\n\
\n\
";
  }

  static const char* value(const  ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.current_pos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DoHeadMoveFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tuw_acin_eva_people::DoHeadMoveFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "current_pos[]" << std::endl;
    for (size_t i = 0; i < v.current_pos.size(); ++i)
    {
      s << indent << "  current_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.current_pos[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // TUW_ACIN_EVA_PEOPLE_MESSAGE_DOHEADMOVEFEEDBACK_H

