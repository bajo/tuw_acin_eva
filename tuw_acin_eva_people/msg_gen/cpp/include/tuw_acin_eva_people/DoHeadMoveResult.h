/* Auto-generated by genmsg_cpp for file /home/bajo/workspace/tuw_acin_eva2/tuw_acin_eva_people/msg/DoHeadMoveResult.msg */
#ifndef TUW_ACIN_EVA_PEOPLE_MESSAGE_DOHEADMOVERESULT_H
#define TUW_ACIN_EVA_PEOPLE_MESSAGE_DOHEADMOVERESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tuw_acin_eva_people
{
template <class ContainerAllocator>
struct DoHeadMoveResult_ {
  typedef DoHeadMoveResult_<ContainerAllocator> Type;

  DoHeadMoveResult_()
  : pos_reached(false)
  {
  }

  DoHeadMoveResult_(const ContainerAllocator& _alloc)
  : pos_reached(false)
  {
  }

  typedef uint8_t _pos_reached_type;
  uint8_t pos_reached;


  typedef boost::shared_ptr< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DoHeadMoveResult
typedef  ::tuw_acin_eva_people::DoHeadMoveResult_<std::allocator<void> > DoHeadMoveResult;

typedef boost::shared_ptr< ::tuw_acin_eva_people::DoHeadMoveResult> DoHeadMoveResultPtr;
typedef boost::shared_ptr< ::tuw_acin_eva_people::DoHeadMoveResult const> DoHeadMoveResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tuw_acin_eva_people

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fab0abf234bba009b5a10cefef47651f";
  }

  static const char* value(const  ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfab0abf234bba009ULL;
  static const uint64_t static_value2 = 0xb5a10cefef47651fULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tuw_acin_eva_people/DoHeadMoveResult";
  }

  static const char* value(const  ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the result\n\
bool pos_reached # True if desired position has is reached\n\
\n\
";
  }

  static const char* value(const  ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pos_reached);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DoHeadMoveResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tuw_acin_eva_people::DoHeadMoveResult_<ContainerAllocator> & v) 
  {
    s << indent << "pos_reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pos_reached);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TUW_ACIN_EVA_PEOPLE_MESSAGE_DOHEADMOVERESULT_H

