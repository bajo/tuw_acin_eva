/* Auto-generated by genmsg_cpp for file /home/bajo/workspace/tuw_acin_eva2/tuw_acin_eva_servo/msg/ServoCurPos.msg */
#ifndef TUW_ACIN_EVA_SERVO_MESSAGE_SERVOCURPOS_H
#define TUW_ACIN_EVA_SERVO_MESSAGE_SERVOCURPOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tuw_acin_eva_servo
{
template <class ContainerAllocator>
struct ServoCurPos_ {
  typedef ServoCurPos_<ContainerAllocator> Type;

  ServoCurPos_()
  : pan_angle(0.0)
  , tilt_angle(0.0)
  {
  }

  ServoCurPos_(const ContainerAllocator& _alloc)
  : pan_angle(0.0)
  , tilt_angle(0.0)
  {
  }

  typedef float _pan_angle_type;
  float pan_angle;

  typedef float _tilt_angle_type;
  float tilt_angle;


  typedef boost::shared_ptr< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ServoCurPos
typedef  ::tuw_acin_eva_servo::ServoCurPos_<std::allocator<void> > ServoCurPos;

typedef boost::shared_ptr< ::tuw_acin_eva_servo::ServoCurPos> ServoCurPosPtr;
typedef boost::shared_ptr< ::tuw_acin_eva_servo::ServoCurPos const> ServoCurPosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tuw_acin_eva_servo

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f191de4d1f51ebd5f8f3b12305019bf6";
  }

  static const char* value(const  ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf191de4d1f51ebd5ULL;
  static const uint64_t static_value2 = 0xf8f3b12305019bf6ULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tuw_acin_eva_servo/ServoCurPos";
  }

  static const char* value(const  ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 pan_angle\n\
float32 tilt_angle\n\
\n\
";
  }

  static const char* value(const  ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pan_angle);
    stream.next(m.tilt_angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ServoCurPos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tuw_acin_eva_servo::ServoCurPos_<ContainerAllocator> & v) 
  {
    s << indent << "pan_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pan_angle);
    s << indent << "tilt_angle: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_angle);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TUW_ACIN_EVA_SERVO_MESSAGE_SERVOCURPOS_H

