/* Auto-generated by genmsg_cpp for file /home/bajo/workspace/tuw_acin_eva2/tuw_acin_eva_servo/msg/ServoPos.msg */
#ifndef TUW_ACIN_EVA_SERVO_MESSAGE_SERVOPOS_H
#define TUW_ACIN_EVA_SERVO_MESSAGE_SERVOPOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace tuw_acin_eva_servo
{
template <class ContainerAllocator>
struct ServoPos_ {
  typedef ServoPos_<ContainerAllocator> Type;

  ServoPos_()
  : pan_angle(0.0)
  , tilt_angle(0.0)
  , pan_speed(0)
  , tilt_speed(0)
  {
  }

  ServoPos_(const ContainerAllocator& _alloc)
  : pan_angle(0.0)
  , tilt_angle(0.0)
  , pan_speed(0)
  , tilt_speed(0)
  {
  }

  typedef float _pan_angle_type;
  float pan_angle;

  typedef float _tilt_angle_type;
  float tilt_angle;

  typedef int32_t _pan_speed_type;
  int32_t pan_speed;

  typedef int32_t _tilt_speed_type;
  int32_t tilt_speed;


  typedef boost::shared_ptr< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ServoPos
typedef  ::tuw_acin_eva_servo::ServoPos_<std::allocator<void> > ServoPos;

typedef boost::shared_ptr< ::tuw_acin_eva_servo::ServoPos> ServoPosPtr;
typedef boost::shared_ptr< ::tuw_acin_eva_servo::ServoPos const> ServoPosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace tuw_acin_eva_servo

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff2fe6b1988f525ab5d7553c924dfb97";
  }

  static const char* value(const  ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xff2fe6b1988f525aULL;
  static const uint64_t static_value2 = 0xb5d7553c924dfb97ULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tuw_acin_eva_servo/ServoPos";
  }

  static const char* value(const  ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 pan_angle\n\
float32 tilt_angle\n\
int32 pan_speed\n\
int32 tilt_speed\n\
\n\
";
  }

  static const char* value(const  ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pan_angle);
    stream.next(m.tilt_angle);
    stream.next(m.pan_speed);
    stream.next(m.tilt_speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ServoPos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::tuw_acin_eva_servo::ServoPos_<ContainerAllocator> & v) 
  {
    s << indent << "pan_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pan_angle);
    s << indent << "tilt_angle: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_angle);
    s << indent << "pan_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pan_speed);
    s << indent << "tilt_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tilt_speed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TUW_ACIN_EVA_SERVO_MESSAGE_SERVOPOS_H

